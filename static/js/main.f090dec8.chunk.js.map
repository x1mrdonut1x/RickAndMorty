{"version":3,"sources":["utils/index.ts","components/card/parts/Section.tsx","components/card/Card.tsx","components/status-icon/StatusIcon.tsx","assets/placeholder.jpeg","components/avatar/Avatar.tsx","components/button/Button.tsx","components/loading-spinner/LoadingSpinner.tsx","components/character-card/CharacterCard.tsx","pages/character-profile/parts/Episodes.tsx","pages/character-profile/parts/Location.tsx","pages/character-profile/parts/Navigation.tsx","pages/character-profile/CharacterProfile.tsx","hooks/useCharacter.ts","hooks/useEpisodes.ts","hooks/useLocations.ts","constants/index.ts","pages/character-list/CharacterList.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["getLocationId","location","split","StyledSection","styled","div","Card","left","children","onClick","width","height","isLoading","rest","StyledCard","$clickable","$width","$height","id","ImageContainer","InfoContainer","Section","title","className","article","props","StatusIcon","status","Icon","$color","span","Avatar","memo","src","useState","setIsLoading","StyledAvatar","onLoad","Placeholder","img","Button","React","StyledButton","button","LoadingSpinner","Spinner","CharacterCard","data","image","alt","name","CharacterName","CharacterStatus","species","gender","h2","Episodes","episodeList","Array","isArray","keys","map","x","style","margin","fluid","padding","ScrollBox","start","episode","index","xs","flex","air_date","Row","Location","type","dimension","residents","length","Navigation","characterId","useParams","history","useHistory","push","marginRight","marginBottom","CharacterProfile","characterFromState","useLocation","state","characterQuery","useQuery","fetch","then","res","json","enabled","useCharacter","undefined","character","originId","origin","url","locationId","getCharacterLocationIds","episodes","episodeIds","sort","a","b","getEpisodeIds","episodesQuery","join","refetchInterval","refetchOnWindowFocus","isIdle","useEpisodes","locations","locationIds","filter","item","pos","indexOf","locationsQuery","useLocations","center","middle","md","lg","xl","find","first","last","placeholderCharacter","created","CharacterList","display","flexWrap","justifyContent","results","pathname","handleGoToCharacter","queryClient","QueryClient","App","QueryClientProvider","client","basename","path","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f090dec8.chunk.js","sourcesContent":["export const getEpisodeIds = (episodes?: string[]) => {\n  if (!episodes) return [];\n  const result = episodes.map((episode) => +episode.split(\"episode/\")[1]);\n\n  return result.sort((a, b) => a - b);\n};\n\nexport const getLocationIds = (locations?: string[]) => {\n  if (!locations) return [];\n  const result: number[] = [];\n\n  locations.forEach((location) => {\n    if (!location) return;\n    const locationId = +location.split(\"location/\")[1];\n    if (!result.includes(locationId)) result.push(locationId);\n  });\n\n  return result.sort((a, b) => a - b);\n};\n\nexport const getLocationId = (location?: string) => {\n  if (!location) return null;\n  return +location.split(\"location/\")[1];\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface SectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n}\n\nexport const Section = ({\n  title,\n  children,\n  ...rest\n}: React.PropsWithChildren<SectionProps>) => {\n  return (\n    <StyledSection {...rest}>\n      {title && <span className=\"title\">{title}</span>}\n      <span className=\"value\">{children}</span>\n    </StyledSection>\n  );\n};\n\nconst StyledSection = styled.div`\n  flex: 1 1 0%;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n\n  span.title {\n    color: rgb(158, 158, 158);\n    font-size: 16px;\n    font-weight: 500;\n  }\n  span.value {\n    color: rgb(245, 245, 245);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Section } from \"./parts/Section\";\nimport { LoadingSpinner } from \"components\";\n\nexport interface CardProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  left?: any;\n  onClick?: () => void;\n  width?: string;\n  height?: string;\n  isLoading?: boolean;\n}\n\nexport const Card = ({\n  left,\n  children,\n  onClick,\n  width,\n  height,\n  isLoading,\n  ...rest\n}: React.PropsWithChildren<CardProps>) => {\n  return (\n    <StyledCard\n      {...(onClick ? { onClick, $clickable: true } : {})}\n      $width={width}\n      $height={height}\n      {...rest}\n    >\n      {isLoading && <LoadingSpinner id=\"card-loader\" />}\n      {left && <ImageContainer>{left}</ImageContainer>}\n      <InfoContainer>{children}</InfoContainer>\n    </StyledCard>\n  );\n};\n\nCard.Section = Section;\n\nconst StyledCard = styled.article<{\n  $clickable?: boolean;\n  $width?: string;\n  $height?: string;\n}>`\n  position: relative;\n  display: flex;\n  flex: 0 1 ${(props) => props.$width || \"auto\"};\n  ${(props) => \"height: \" + props.$height};\n  overflow: hidden;\n  background: rgb(60, 62, 68) none repeat scroll 0% 0%;\n  border-radius: 0.5rem;\n  margin: 0.75rem;\n  transition: all 0.2s;\n\n  ${(props) =>\n    props.$clickable &&\n    `\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.05);\n  }\n  `}\n`;\n\nconst ImageContainer = styled.div`\n  position: relative;\n  flex: 2 1 0%;\n  width: 100%;\n`;\n\nconst InfoContainer = styled.div`\n  flex: 3 1 0%;\n  position: relative;\n  padding: 0.75rem;\n  color: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n`;\n","import styled from \"styled-components\";\n\nexport const StatusIcon = ({\n  status,\n}: {\n  status: \"Dead\" | \"Alive\" | \"unknown\";\n}) => {\n  if (status === \"unknown\") return null;\n\n  return <Icon $color={status === \"Dead\" ? \"red\" : \"green\"} />;\n};\n\nconst Icon = styled.span<{ $color: \"red\" | \"green\" }>`\n  height: 0.5rem;\n  width: 0.5rem;\n  margin-right: 0.375rem;\n  background: ${(props) =>\n      props.$color === \"red\" ? \"rgb(214, 61, 46)\" : \"rgb(85, 204, 68)\"}\n    none repeat scroll 0% 0%;\n  border-radius: 50%;\n`;\n","export default __webpack_public_path__ + \"static/media/placeholder.049210b4.jpeg\";","import { useState, memo } from \"react\";\nimport styled from \"styled-components\";\nimport Placeholder from \"assets/placeholder.jpeg\";\nimport { LoadingSpinner } from \"components\";\n\ninterface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {}\n\nexport const Avatar = memo(({ src, ...props }: AvatarProps) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <>\n      <StyledAvatar\n        {...props}\n        onLoad={() => setIsLoading(false)}\n        src={isLoading ? Placeholder : src}\n      />\n      {isLoading && <LoadingSpinner id=\"image-loader\" />}\n    </>\n  );\n});\n\nconst StyledAvatar = styled.img`\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  opacity: 1;\n  object-fit: cover;\n  object-position: center center;\n  transition: opacity 0.5s ease 0s;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Button = React.memo(\n  (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n    return <StyledButton {...props} />;\n  }\n);\n\nconst StyledButton = styled.button`\n  background: rgb(60, 62, 68) none repeat scroll 0% 0%;\n  color: white;\n  border-radius: 0.5rem;\n  border: none;\n  font-size: 1.2rem;\n  padding: 12px 16px;\n  transition: 0.2s all;\n\n  :hover {\n    cursor: pointer;\n    background: rgb(94, 97, 105) none repeat scroll 0% 0%;\n  }\n`;\n","import styled from \"styled-components\";\n\ninterface LoadingSpinnerProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement> {}\n\nexport const LoadingSpinner = (props: LoadingSpinnerProps) => {\n  return <Spinner {...props}></Spinner>;\n};\n\nconst Spinner = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  height: 50px;\n  width: 50px;\n  margin: -25px 0 0 -25px;\n  border: 4px rgba(0, 0, 0, 0.25) solid;\n  border-top: 4px black solid;\n  border-radius: 50%;\n  animation: spin2 1s infinite linear;\n\n  @-webkit-keyframes spin2 {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(359deg);\n    }\n  }\n  @keyframes spin2 {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(359deg);\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport { Character } from \"interfaces/Character\";\nimport { Avatar, Card, StatusIcon } from \"components\";\nimport { CardProps } from \"components/card/Card\";\n\ninterface CharacterCardProps extends CardProps {\n  data?: Character;\n}\n\nexport const CharacterCard = ({ data, ...props }: CharacterCardProps) => {\n  if (data == null) return <Card {...props} height=\"200px\" isLoading />;\n\n  return (\n    <Card\n      key={data.id}\n      left={<Avatar src={data.image} alt={data.name} />}\n      {...props}\n    >\n      <Card.Section>\n        <CharacterName>{data.name}</CharacterName>\n        <CharacterStatus>\n          <StatusIcon status={data.status} />\n          {data.status} - {data.species}\n        </CharacterStatus>\n      </Card.Section>\n      <Card.Section title=\"Species\">{data.species}</Card.Section>\n      <Card.Section title=\"Gender\">{data.gender}</Card.Section>\n    </Card>\n  );\n};\n\nconst CharacterStatus = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CharacterName = styled.h2`\n  padding: 0;\n  margin: 0;\n`;\n","import { Card } from \"components\";\nimport { Episode } from \"interfaces/Episode\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport styled from \"styled-components\";\n\ninterface EpisodesProps {\n  data?: Episode[] | Episode;\n  isLoading?: boolean;\n}\n\nexport const Episodes = ({ data, isLoading }: EpisodesProps) => {\n  const episodeList = Array.isArray(data) ? data : data != null ? [data] : [];\n\n  if (isLoading)\n    return (\n      <>\n        {[...Array(3).keys()].map((x) => (\n          <Card\n            key={x}\n            isLoading\n            height=\"124px\"\n            style={{ margin: \"0 0 0.74rem 0\" }}\n          />\n        ))}\n      </>\n    );\n\n  return (\n    <Grid fluid style={{ padding: 0 }}>\n      <ScrollBox start=\"xs\">\n        {episodeList?.map((episode, index) => (\n          <Col xs={12} key={episode.id}>\n            <Card style={{ margin: \"0 0 0.74rem 0\" }}>\n              <Card.Section title=\"Name\" style={{ flex: \"3 1 0\" }}>\n                {episode.name}\n              </Card.Section>\n              <Row>\n                <Col xs={4}>\n                  <Card.Section title=\"Episode\">{episode.episode}</Card.Section>\n                </Col>\n                <Col>\n                  <Card.Section title=\"Air Date\">\n                    {episode.air_date}\n                  </Card.Section>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </ScrollBox>\n    </Grid>\n  );\n};\n\nconst ScrollBox = styled(Row)`\n  max-height: 80vh;\n  overflow: auto;\n  scrollbar-color: #c2c2c2 transparent;\n`;\n","import styled from \"styled-components\";\nimport { Card } from \"components\";\nimport { Location as LocationInterface } from \"interfaces/Location\";\n\ninterface LocationProps {\n  data?: LocationInterface;\n  title: string;\n  isLoading?: boolean;\n}\n\nexport const Location = ({ data, title, isLoading }: LocationProps) => {\n  return (\n    <Card style={{ margin: \"0.75rem 0\" }} isLoading={isLoading}>\n      {title && <CharacterName>{title}</CharacterName>}\n      {data == null ? (\n        <Card.Section>Unknown</Card.Section>\n      ) : (\n        <>\n          <Card.Section title=\"Name\">{data?.name}</Card.Section>\n          <Card.Section title=\"Type\">{data?.type}</Card.Section>\n          <Card.Section title=\"Dimension\">{data?.dimension}</Card.Section>\n          <Card.Section title=\"Residents\">\n            {data?.residents.length}\n          </Card.Section>\n        </>\n      )}\n    </Card>\n  );\n};\n\nconst CharacterName = styled.h2`\n  padding: 0;\n  margin: 0;\n`;\n","import { useHistory, useParams } from \"react-router-dom\";\nimport { Button } from \"components\";\nimport { Row, Col } from \"react-flexbox-grid\";\n\nexport const Navigation = () => {\n  const { characterId } = useParams<{ characterId: string }>();\n  const history = useHistory();\n\n  const handleGoBack = () => {\n    history.push(\"\");\n  };\n\n  const handleGoToPrevCharacter = () => {\n    history.push(`/characters/${+characterId - 1}`);\n  };\n\n  const handleGoToNextCharacter = () => {\n    history.push(`/characters/${+characterId + 1}`);\n  };\n\n  return (\n    <Row style={{ padding: \"0 8px\" }}>\n      <Col>\n        <Button\n          onClick={handleGoBack}\n          style={{ marginRight: \"0.75rem\", marginBottom: \"0.75rem\" }}\n        >\n          Back\n        </Button>\n      </Col>\n      <Col>\n        {+characterId > 1 && (\n          <Button\n            onClick={handleGoToPrevCharacter}\n            style={{ marginRight: \"0.75rem\", marginBottom: \"0.75rem\" }}\n          >\n            Previous Character\n          </Button>\n        )}\n      </Col>\n      <Col>\n        <Button\n          onClick={handleGoToNextCharacter}\n          style={{ marginRight: \"0.75rem\", marginBottom: \"0.75rem\" }}\n        >\n          Next Character\n        </Button>\n      </Col>\n    </Row>\n  );\n};\n","import { useLocations, useEpisodes, useCharacter } from \"hooks\";\nimport { Character } from \"interfaces/Character\";\nimport { getLocationId } from \"utils\";\nimport { Episodes } from \"./parts/Episodes\";\nimport { Location } from \"./parts/Location\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport { CharacterCard } from \"components\";\nimport { Navigation } from \"./parts/Navigation\";\n\nexport const CharacterProfile = () => {\n  const { state: characterFromState } = useLocation<Character>();\n  const { characterId } = useParams<{ characterId: string }>();\n\n  const characterQuery = useCharacter(\n    characterFromState ? undefined : characterId\n  );\n\n  const character = characterFromState || characterQuery.data;\n\n  const { originId, locationId } = getCharacterLocationIds(character);\n\n  const episodes = useEpisodes(character?.episode);\n  const locations = useLocations([originId, locationId]);\n\n  return (\n    <Grid fluid>\n      <Row center=\"xs\" middle=\"xs\" style={{ height: \"100vh\" }}>\n        <Col xs={16} md={12} lg={10} xl={8}>\n          <Row start=\"xs\">\n            <Col xs={16} md={8}>\n              <Row>\n                <Col xs={12}>\n                  <CharacterCard data={character} style={{ margin: 0 }} />\n                </Col>\n                <Col xs={12} md={6}>\n                  <Location\n                    isLoading={locations.isLoading}\n                    title=\"Last seen\"\n                    data={locations.data?.find((x) => x.id === originId)}\n                  />\n                </Col>\n                <Col xs={12} md={6}>\n                  <Location\n                    isLoading={locations.isLoading}\n                    title=\"Origin\"\n                    data={locations.data?.find((x) => x.id === originId)}\n                  />\n                </Col>\n                <Col xs={12} first=\"xs\" last=\"md\">\n                  <Navigation />\n                </Col>\n              </Row>\n            </Col>\n            <Col xs={12} md={4}>\n              <Episodes isLoading={episodes.isLoading} data={episodes.data} />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Grid>\n  );\n};\n\nfunction getCharacterLocationIds(character: Character) {\n  const originId = getLocationId(character?.origin?.url);\n  const locationId = getLocationId(character?.location?.url);\n\n  return { originId, locationId };\n}\n","import { useQuery } from \"react-query\";\nimport { Character } from \"interfaces/Character\";\n\nexport const useCharacter = (characterId?: number | string) => {\n  const characterQuery = useQuery<Character>(\n    [\"character\", characterId],\n    () =>\n      fetch(`https://rickandmortyapi.com/api/character/${characterId}`).then(\n        (res) => res.json()\n      ),\n    { enabled: characterId != null }\n  );\n\n  return characterQuery;\n};\n","import { useQuery } from \"react-query\";\nimport { Episode } from \"interfaces/Episode\";\nimport { getEpisodeIds } from \"utils\";\n\nexport const useEpisodes = (episodes?: string[]) => {\n  const episodeIds = getEpisodeIds(episodes);\n\n  const episodesQuery = useQuery<Episode[]>(\n    [\"episodes\", episodeIds],\n    () =>\n      fetch(\n        `https://rickandmortyapi.com/api/episode/${episodeIds.join(\",\")}`\n      ).then((res) => res.json()),\n    {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      enabled: (episodeIds?.length || []) > 0,\n    }\n  );\n\n  let data = episodesQuery.data || [];\n  if (!Array.isArray(episodesQuery.data) && episodesQuery.data != null)\n    data = [episodesQuery.data];\n\n  return {\n    ...episodesQuery,\n    data,\n    isLoading: episodesQuery.isLoading || episodesQuery.isIdle,\n  };\n};\n","import { useQuery } from \"react-query\";\nimport { Location } from \"interfaces/Location\";\n\nexport const useLocations = (locations?: (number | null)[]) => {\n  const locationIds = locations?.filter(\n    (item, pos) => locations.indexOf(item) === pos\n  );\n\n  const locationsQuery = useQuery<Location[]>(\n    [\"locations\", locationIds],\n    () =>\n      fetch(\n        `https://rickandmortyapi.com/api/location/${locationIds?.join(\",\")}`\n      ).then((res) => res.json()),\n    {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      enabled: (locationIds?.length || []) > 0,\n    }\n  );\n\n  let data = locationsQuery.data || [];\n  if (!Array.isArray(locationsQuery.data) && locationsQuery.data != null)\n    data = [locationsQuery.data];\n\n  return {\n    ...locationsQuery,\n    data,\n    isLoading: locationsQuery.isLoading || locationsQuery.isIdle,\n  };\n};\n","import { Character } from \"interfaces/Character\";\nimport Placeholder from \"assets/placeholder.jpeg\";\n\nexport const placeholderCharacter: Character = {\n  name: \"-\",\n  id: 0,\n  status: \"unknown\",\n  species: \"\",\n  type: \"\",\n  gender: \"unknown\",\n  origin: { name: \"unknown\", url: \"\" },\n  location: { name: \"unknown\", url: \"\" },\n  image: Placeholder,\n  episode: [],\n  url: \"\",\n  created: \"\",\n};\n","import { Character } from \"interfaces/Character\";\nimport { useQuery } from \"react-query\";\nimport { useHistory } from \"react-router-dom\";\nimport { CharacterCard } from \"components\";\nimport { placeholderCharacter } from \"../../constants\";\n\ninterface CharacterResponse {\n  info: any;\n  results: Character[];\n}\n\nexport function CharacterList() {\n  const history = useHistory();\n\n  const characterQuery = useQuery<CharacterResponse>(\"characters\", () =>\n    fetch(\"https://rickandmortyapi.com/api/character\").then((res) => res.json())\n  );\n\n  const handleGoToCharacter = (character: Character) => {\n    history.push({\n      pathname: `characters/${character.id}`,\n      state: character,\n    });\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n    >\n      {characterQuery.isLoading\n        ? [...Array(20).keys()].map((x) => (\n            <CharacterCard\n              isLoading\n              key={x}\n              data={placeholderCharacter}\n              width=\"380px\"\n              height=\"184px\"\n            />\n          ))\n        : characterQuery.data?.results.map((character) => (\n            <CharacterCard\n              key={character.id}\n              data={character}\n              onClick={() => handleGoToCharacter(character)}\n              width=\"380px\"\n            />\n          ))}\n    </div>\n  );\n}\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport { CharacterProfile, CharacterList } from \"pages\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router basename=\"/RickAndMorty\">\n        <Switch>\n          <Route path=\"/characters/:characterId\" component={CharacterProfile} />\n          <Route path=\"/characters\" component={CharacterList} />\n          <Redirect to=\"/characters\" />\n        </Switch>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
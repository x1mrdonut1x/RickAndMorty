{"version":3,"sources":["utils/index.ts","hooks/useLocations.ts","components/card/parts/Section.tsx","components/card/Card.tsx","components/status-icon/StatusIcon.tsx","components/avatar/Avatar.tsx","components/button/Button.tsx","components/loading-spinner/LoadingSpinner.tsx","components/character-card/CharacterCard.tsx","pages/character-profile/parts/Episodes.tsx","pages/character-profile/parts/Location.tsx","pages/character-profile/parts/Navigation.tsx","pages/character-profile/CharacterProfile.tsx","hooks/useCharacter.ts","hooks/useEpisodes.ts","constants/index.ts","assets/placeholder.jpeg","pages/character-list/CharacterList.tsx","app/App.tsx","reportWebVitals.ts","index.tsx"],"names":["getLocationId","location","split","makeArray","data","Array","isArray","StyledSection","styled","div","Card","left","children","onClick","width","height","isLoading","rest","StyledCard","$clickable","$width","$height","LoadingSpinner","id","ImageContainer","InfoContainer","Section","title","className","article","props","StatusIcon","React","memo","status","Icon","$color","getStatusColor","span","Avatar","src","useState","setIsLoading","StyledAvatar","onLoad","img","Button","StyledButton","button","Spinner","CharacterCard","size","image","alt","name","CharacterName","$fontSize","CharacterStatus","species","gender","h2","Episodes","episodeList","style","keys","map","x","margin","fluid","padding","ScrollBox","start","episode","xs","flex","air_date","Row","Location","type","dimension","residents","length","Navigation","characterId","useParams","history","useHistory","push","CharacterProfile","characterFromState","useLocation","state","characterQuery","useQuery","fetch","then","res","json","enabled","useCharacter","undefined","character","originId","origin","url","locationId","getCharacterLocationIds","episodes","episodeIds","sort","a","b","getEpisodeIds","episodesQuery","join","refetchInterval","refetchOnWindowFocus","useEpisodes","locations","locationIds","filter","item","pos","indexOf","locationsQuery","useLocations","Wrapper","center","middle","md","lg","xl","marginBottom","find","isIdle","Grid","placeholderCharacter","created","CharacterList","display","flexWrap","justifyContent","results","pathname","handleGoToCharacter","queryClient","QueryClient","App","QueryClientProvider","client","basename","path","component","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b714898a.chunk.js","sourcesContent":["import { Character } from \"interfaces/Character\";\n\nexport const getEpisodeIds = (episodes?: string[]) => {\n  if (!episodes) return [];\n  const result = episodes.map((episode) => +episode.split(\"episode/\")[1]);\n\n  return result.sort((a, b) => a - b);\n};\n\nexport const getLocationIds = (locations?: string[]) => {\n  if (!locations) return [];\n  const result: number[] = [];\n\n  locations.forEach((location) => {\n    if (!location) return;\n    const locationId = +location.split(\"location/\")[1];\n    if (!result.includes(locationId)) result.push(locationId);\n  });\n\n  return result.sort((a, b) => a - b);\n};\n\nexport const getLocationId = (location?: string) => {\n  if (!location) return null;\n  return +location.split(\"location/\")[1];\n};\n\nexport function getCharacterLocationIds(character?: Character) {\n  if (!character) return { originId: null, locationId: null };\n\n  const originId = getLocationId(character.origin.url);\n  const locationId = getLocationId(character.location.url);\n\n  return { originId, locationId };\n}\n\nexport function makeArray<T>(data: T | T[] | undefined) {\n  if (!Array.isArray(data) && data != null) return [data];\n  if (Array.isArray(data)) return data;\n  return [];\n}\n","import { useQuery } from \"react-query\";\nimport { Location } from \"interfaces/Location\";\nimport { makeArray } from \"utils\";\n\nexport const useLocations = (locations?: (number | null)[]) => {\n  // remove duplicated and empty values\n  const locationIds = locations?.filter(\n    (item, pos) => item && locations.indexOf(item) === pos\n  );\n\n  const locationsQuery = useQuery<Location[]>(\n    [\"locations\", locationIds],\n    () =>\n      fetch(\n        `https://rickandmortyapi.com/api/location/${locationIds?.join(\",\")}`\n      ).then((res) => res.json()),\n    {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      enabled: (locationIds?.length || []) > 0,\n    }\n  );\n\n  // if value not array, return array\n  const data = makeArray(locationsQuery.data);\n\n  return {\n    ...locationsQuery,\n    data,\n  };\n};\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface SectionProps extends React.HTMLAttributes<HTMLDivElement> {\n  title?: string;\n}\n\nexport const Section = ({\n  title,\n  children,\n  ...rest\n}: React.PropsWithChildren<SectionProps>) => {\n  return (\n    <StyledSection {...rest}>\n      {title && <span className=\"title\">{title}</span>}\n      <span className=\"value\">{children}</span>\n    </StyledSection>\n  );\n};\n\nconst StyledSection = styled.div`\n  flex: 1 1 0%;\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 10px;\n\n  span.title {\n    color: rgb(158, 158, 158);\n    font-size: 16px;\n    font-weight: 500;\n  }\n  span.value {\n    color: rgb(245, 245, 245);\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport { Section } from \"./parts/Section\";\nimport { LoadingSpinner } from \"components\";\n\nexport interface CardProps extends React.ImgHTMLAttributes<HTMLImageElement> {\n  left?: any;\n  onClick?: () => void;\n  width?: string;\n  height?: string;\n  isLoading?: boolean;\n}\n\nexport const Card = ({\n  left,\n  children,\n  onClick,\n  width,\n  height,\n  isLoading,\n  ...rest\n}: React.PropsWithChildren<CardProps>) => {\n  return (\n    <StyledCard\n      {...(onClick ? { onClick, $clickable: true } : {})}\n      $width={width}\n      $height={height}\n      {...rest}\n    >\n      {isLoading && <LoadingSpinner id=\"card-loader\" />}\n      {left && <ImageContainer>{left}</ImageContainer>}\n      <InfoContainer>{children}</InfoContainer>\n    </StyledCard>\n  );\n};\n\nCard.Section = Section;\n\nconst StyledCard = styled.article<{\n  $clickable?: boolean;\n  $width?: string;\n  $height?: string;\n}>`\n  position: relative;\n  display: flex;\n  flex: 0 1 ${(props) => props.$width || \"auto\"};\n  ${(props) => \"height: \" + props.$height};\n  overflow: hidden;\n  background: rgb(60, 62, 68) none repeat scroll 0% 0%;\n  border-radius: 0.5rem;\n  margin: 0.75rem;\n  transition: all 0.2s;\n\n  ${(props) =>\n    props.$clickable &&\n    `\n  &:hover {\n    cursor: pointer;\n    transform: scale(1.05);\n  }\n  `}\n`;\n\nconst ImageContainer = styled.div`\n  position: relative;\n  flex: 2 1 0%;\n  width: 100%;\n`;\n\nconst InfoContainer = styled.div`\n  flex: 3 1 0%;\n  position: relative;\n  padding: 0.75rem;\n  color: rgb(255, 255, 255);\n  display: flex;\n  flex-direction: column;\n`;\n","import { StatusType } from \"interfaces/Character\";\nimport React from \"react\";\nimport styled from \"styled-components\";\n\ninterface StatusIconProps {\n  status: StatusType;\n}\n\nexport const StatusIcon = React.memo(({ status }: StatusIconProps) => {\n  return <Icon $color={getStatusColor(status)} />;\n});\n\nconst Icon = styled.span<{ $color: string }>`\n  height: 0.5rem;\n  width: 0.5rem;\n  margin-right: 0.375rem;\n  background: ${(props) => props.$color};\n  border-radius: 50%;\n  margin-top: 2px;\n`;\n\nconst getStatusColor = (status: StatusType) => {\n  if (status === \"Dead\") return \"rgb(214, 61, 46)\";\n  if (status === \"Alive\") return \"rgb(85, 204, 68)\";\n  return \"rgb(224, 184, 72)\";\n};\n","import React, { useState } from \"react\";\nimport styled from \"styled-components\";\nimport { LoadingSpinner } from \"components\";\n\ninterface AvatarProps extends React.ImgHTMLAttributes<HTMLImageElement> {}\n\nexport const Avatar = React.memo(({ src, ...props }: AvatarProps) => {\n  const [isLoading, setIsLoading] = useState(true);\n\n  return (\n    <>\n      <StyledAvatar\n        {...props}\n        onLoad={() => setIsLoading(false)}\n        src={src}\n      />\n      {isLoading && <LoadingSpinner id=\"image-loader\" />}\n    </>\n  );\n});\n\nconst StyledAvatar = styled.img`\n  width: 100%;\n  height: 100%;\n  margin: 0px;\n  opacity: 1;\n  object-fit: cover;\n  object-position: center center;\n  transition: opacity 0.5s ease 0s;\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\nexport const Button = React.memo(\n  (props: React.ButtonHTMLAttributes<HTMLButtonElement>) => {\n    return <StyledButton {...props} />;\n  }\n);\n\nconst StyledButton = styled.button`\n  background: rgb(60, 62, 68) none repeat scroll 0% 0%;\n  color: white;\n  border-radius: 0.5rem;\n  border: none;\n  font-size: 1.2rem;\n  padding: 12px 16px;\n  transition: 0.2s all;\n\n  :hover {\n    cursor: pointer;\n    background: rgb(94, 97, 105) none repeat scroll 0% 0%;\n  }\n`;\n","import React from \"react\";\nimport styled from \"styled-components\";\n\ninterface LoadingSpinnerProps\n  extends React.HtmlHTMLAttributes<HTMLDivElement> {}\n\nexport const LoadingSpinner = React.memo((props: LoadingSpinnerProps) => {\n  return <Spinner {...props}></Spinner>;\n});\n\nconst Spinner = styled.div`\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  height: 50px;\n  width: 50px;\n  margin: -25px 0 0 -25px;\n  border: 4px rgba(0, 0, 0, 0.25) solid;\n  border-top: 4px black solid;\n  border-radius: 50%;\n  animation: spin2 1s infinite linear;\n\n  @-webkit-keyframes spin2 {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(359deg);\n    }\n  }\n  @keyframes spin2 {\n    from {\n      transform: rotate(0deg);\n    }\n    to {\n      transform: rotate(359deg);\n    }\n  }\n`;\n","import styled from \"styled-components\";\nimport { Character } from \"interfaces/Character\";\nimport { Avatar, Card, StatusIcon } from \"components\";\nimport { CardProps } from \"components/card/Card\";\n\ninterface CharacterCardProps extends CardProps {\n  data: Character;\n  size?: \"default\" | \"large\";\n}\n\nexport const CharacterCard = ({\n  data,\n  size = \"default\",\n  ...props\n}: React.PropsWithChildren<CharacterCardProps>) => {\n  return (\n    <Card\n      key={data.id}\n      left={<Avatar src={data.image} alt={data.name} />}\n      {...props}\n    >\n      <Card.Section>\n        <CharacterName $fontSize={size === \"default\" ? 24 : 34}>\n          {data.name}\n        </CharacterName>\n        <CharacterStatus>\n          <StatusIcon status={data.status} />\n          {data.status} - {data.species}\n        </CharacterStatus>\n      </Card.Section>\n      <Card.Section title=\"Gender\">{data.gender}</Card.Section>\n      {props.children}\n    </Card>\n  );\n};\n\nconst CharacterStatus = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst CharacterName = styled.h2<{ $fontSize: number }>`\n  padding: 0;\n  margin: 0;\n  font-size: ${(props) => props.$fontSize}px;\n`;\n","import { Card } from \"components\";\nimport { Episode } from \"interfaces/Episode\";\nimport React from \"react\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport styled from \"styled-components\";\n\ninterface EpisodesProps {\n  data?: Episode[] | Episode;\n  isLoading?: boolean;\n}\n\nexport const Episodes = React.memo(({ data, isLoading }: EpisodesProps) => {\n  const episodeList = Array.isArray(data) ? data : data != null ? [data] : [];\n\n  if (isLoading)\n    return (\n      <div style={{ height: \"65vh\" }}>\n        {[...Array(3).keys()].map((x) => (\n          <Card\n            key={x}\n            isLoading\n            height=\"124px\"\n            style={{ margin: \"0 0 0.74rem 0\" }}\n          />\n        ))}\n      </div>\n    );\n\n  return (\n    <Grid fluid style={{ padding: 0 }}>\n      <ScrollBox start=\"xs\">\n        {episodeList?.map((episode) => (\n          <Col xs={12} key={episode.id}>\n            <Card style={{ margin: \"0 0 0.74rem 0\" }}>\n              <Card.Section title=\"Name\" style={{ flex: \"3 1 0\" }}>\n                {episode.name}\n              </Card.Section>\n              <Row>\n                <Col xs={4}>\n                  <Card.Section title=\"Episode\">{episode.episode}</Card.Section>\n                </Col>\n                <Col>\n                  <Card.Section title=\"Air Date\">\n                    {episode.air_date}\n                  </Card.Section>\n                </Col>\n              </Row>\n            </Card>\n          </Col>\n        ))}\n      </ScrollBox>\n    </Grid>\n  );\n});\n\nconst ScrollBox = styled(Row)`\n  max-height: 65vh;\n  overflow: auto;\n  scrollbar-color: #c2c2c2 transparent;\n`;\n","import styled from \"styled-components\";\nimport { Card } from \"components\";\nimport { Location as LocationInterface } from \"interfaces/Location\";\nimport React from \"react\";\n\ninterface LocationProps {\n  data?: LocationInterface;\n  title: string;\n  isLoading?: boolean;\n}\n\nexport const Location = React.memo(\n  ({ data, title, isLoading }: LocationProps) => {\n    return (\n      <Card\n        style={{ margin: \"0 0 0.75rem 0\" }}\n        isLoading={isLoading}\n        {...(isLoading ? { height: \"236px\" } : {})}\n      >\n        {title && <CharacterName>{title}</CharacterName>}\n        {data == null ? (\n          <Card.Section>Unknown</Card.Section>\n        ) : (\n          <>\n            <Card.Section title=\"Name\">{data?.name}</Card.Section>\n            <Card.Section title=\"Type\">{data?.type}</Card.Section>\n            <Card.Section title=\"Dimension\">{data?.dimension}</Card.Section>\n            <Card.Section title=\"Residents\">\n              {data?.residents.length}\n            </Card.Section>\n          </>\n        )}\n      </Card>\n    );\n  }\n);\n\nconst CharacterName = styled.h2`\n  padding: 0;\n  margin: 0;\n`;\n","import { useHistory, useParams } from \"react-router-dom\";\nimport { Button } from \"components\";\nimport { Row, Col } from \"react-flexbox-grid\";\nimport styled from \"styled-components\";\nimport React from \"react\";\n\nexport const Navigation = React.memo(() => {\n  const { characterId } = useParams<{ characterId: string }>();\n  const history = useHistory();\n\n  const handleGoBack = () => {\n    history.push(\"\");\n  };\n\n  const handleGoToPrevCharacter = () => {\n    history.push(`/characters/${+characterId - 1}`);\n  };\n\n  const handleGoToNextCharacter = () => {\n    history.push(`/characters/${+characterId + 1}`);\n  };\n\n  return (\n    <Row style={{ padding: \"0.75rem 8px 0 8px\" }}>\n      <Col>\n        <StyledButton onClick={handleGoBack}>Back</StyledButton>\n      </Col>\n      <Col>\n        {+characterId > 1 && (\n          <StyledButton onClick={handleGoToPrevCharacter}>\n            Previous Character\n          </StyledButton>\n        )}\n      </Col>\n      <Col>\n        <StyledButton onClick={handleGoToNextCharacter}>\n          Next Character\n        </StyledButton>\n      </Col>\n    </Row>\n  );\n});\n\nconst StyledButton = styled(Button)`\n  margin-right: 0.75rem;\n  margin-bottom: 0.75rem;\n`;\n","import { useLocations, useEpisodes, useCharacter } from \"hooks\";\nimport { Character } from \"interfaces/Character\";\nimport { getCharacterLocationIds } from \"utils\";\nimport { Episodes } from \"./parts/Episodes\";\nimport { Location } from \"./parts/Location\";\nimport { useLocation, useParams } from \"react-router-dom\";\nimport { Grid, Row, Col } from \"react-flexbox-grid\";\nimport { Card, CharacterCard } from \"components\";\nimport { Navigation } from \"./parts/Navigation\";\nimport styled from \"styled-components\";\n\nexport const CharacterProfile = () => {\n  const { state: characterFromState } = useLocation<Character | undefined>();\n  const { characterId } = useParams<{ characterId: string }>();\n\n  const characterQuery = useCharacter(\n    characterFromState ? undefined : characterId\n  );\n\n  const character = characterFromState || characterQuery.data;\n\n  const { originId, locationId } = getCharacterLocationIds(character);\n\n  const episodes = useEpisodes(character?.episode);\n  const locations = useLocations([originId, locationId]);\n\n  return (\n    <Wrapper fluid>\n      <Row center=\"xs\" middle=\"xs\">\n        <Col xs={16} md={12} lg={10} xl={8}>\n          <Navigation />\n        </Col>\n        <Col xs={16} md={12} lg={10} xl={8}>\n          <Row start=\"xs\">\n            <Col xs={16} md={8}>\n              <Row>\n                <Col xs={12}>\n                  {character == null ? (\n                    <Card\n                      style={{\n                        margin: 0,\n                        marginBottom: \"0.75rem\",\n                      }}\n                      height=\"260px\"\n                      isLoading\n                    />\n                  ) : (\n                    <CharacterCard\n                      size=\"large\"\n                      data={character}\n                      style={{\n                        margin: 0,\n                        marginBottom: \"0.75rem\",\n                      }}\n                      height=\"260px\"\n                    >\n                      <Card.Section title=\"# Episodes\">\n                        {character?.episode?.length || 0}\n                      </Card.Section>\n                      {character?.type && (\n                        <Card.Section title=\"Type\">\n                          {character?.type}\n                        </Card.Section>\n                      )}\n                    </CharacterCard>\n                  )}\n                </Col>\n                <Col xs={12} md={6}>\n                  <Location\n                    isLoading={locations.isLoading}\n                    title=\"Last seen\"\n                    data={locations.data?.find((x) => x.id === originId)}\n                  />\n                </Col>\n                <Col xs={12} md={6}>\n                  <Location\n                    isLoading={locations.isLoading}\n                    title=\"Origin\"\n                    data={locations.data?.find((x) => x.id === originId)}\n                  />\n                </Col>\n              </Row>\n            </Col>\n            <Col xs={12} md={4}>\n              <Episodes\n                isLoading={episodes.isLoading || episodes.isIdle}\n                data={episodes.data}\n              />\n            </Col>\n          </Row>\n        </Col>\n      </Row>\n    </Wrapper>\n  );\n};\n\nconst Wrapper = styled(Grid)`\n  @media (min-width: 768px) {\n    margin-top: 0;\n  }\n\n  @media (min-width: 992px) {\n    margin-top: 5vh;\n  }\n\n  @media (min-width: 1200px) {\n    margin-top: 10vh;\n  }\n`;\n","import { useQuery } from \"react-query\";\nimport { Character } from \"interfaces/Character\";\n\nexport const useCharacter = (characterId?: number | string) => {\n  const characterQuery = useQuery<Character>(\n    [\"character\", characterId],\n    () =>\n      fetch(`https://rickandmortyapi.com/api/character/${characterId}`).then(\n        (res) => res.json()\n      ),\n    { enabled: characterId != null }\n  );\n\n  return characterQuery;\n};\n","import { useQuery } from \"react-query\";\nimport { Episode } from \"interfaces/Episode\";\nimport { getEpisodeIds, makeArray } from \"utils\";\n\nexport const useEpisodes = (episodes?: string[]) => {\n  const episodeIds = getEpisodeIds(episodes);\n\n  const episodesQuery = useQuery<Episode[]>(\n    [\"episodes\", episodeIds],\n    () =>\n      fetch(\n        `https://rickandmortyapi.com/api/episode/${episodeIds.join(\",\")}`\n      ).then((res) => res.json()),\n    {\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      enabled: (episodeIds?.length || []) > 0,\n    }\n  );\n\n  // if value not array, return array\n  const data = makeArray(episodesQuery.data);\n\n  return {\n    ...episodesQuery,\n    data,\n  };\n};\n","import { Character } from \"interfaces/Character\";\nimport Placeholder from \"assets/placeholder.jpeg\";\n\nexport const placeholderCharacter: Character = {\n  name: \"-\",\n  id: 0,\n  status: \"unknown\",\n  species: \"\",\n  type: \"\",\n  gender: \"unknown\",\n  origin: { name: \"unknown\", url: \"\" },\n  location: { name: \"unknown\", url: \"\" },\n  image: Placeholder,\n  episode: [],\n  url: \"\",\n  created: \"\",\n};\n","export default __webpack_public_path__ + \"static/media/placeholder.049210b4.jpeg\";","import { Character } from \"interfaces/Character\";\nimport { useQuery } from \"react-query\";\nimport { useHistory } from \"react-router-dom\";\nimport { CharacterCard } from \"components\";\nimport { placeholderCharacter } from \"../../constants\";\n\ninterface CharacterResponse {\n  info: any;\n  results: Character[];\n}\n\nexport function CharacterList() {\n  const history = useHistory();\n\n  const characterQuery = useQuery<CharacterResponse>(\"characters\", () =>\n    fetch(\"https://rickandmortyapi.com/api/character\").then((res) => res.json())\n  );\n\n  const handleGoToCharacter = (character: Character) => {\n    history.push({\n      pathname: `characters/${character.id}`,\n      state: character,\n    });\n  };\n\n  return (\n    <div\n      style={{ display: \"flex\", flexWrap: \"wrap\", justifyContent: \"center\" }}\n    >\n      {characterQuery.isLoading\n        ? [...Array(30).keys()].map((x) => (\n            <CharacterCard\n              isLoading\n              key={x}\n              data={placeholderCharacter}\n              width=\"380px\"\n              height=\"184px\"\n            />\n          ))\n        : characterQuery.data?.results.map((character) => (\n            <CharacterCard\n              key={character.id}\n              data={character}\n              onClick={() => handleGoToCharacter(character)}\n              width=\"380px\"\n            />\n          ))}\n    </div>\n  );\n}\n","import { QueryClient, QueryClientProvider } from \"react-query\";\nimport { CharacterProfile, CharacterList } from \"pages\";\nimport {\n  BrowserRouter as Router,\n  Route,\n  Redirect,\n  Switch,\n} from \"react-router-dom\";\n\nconst queryClient = new QueryClient();\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <Router basename=\"/RickAndMorty\">\n        <Switch>\n          <Route path=\"/characters/:characterId\" component={CharacterProfile} />\n          <Route path=\"/characters\" component={CharacterList} />\n          <Redirect to=\"/characters\" />\n        </Switch>\n      </Router>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./app/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}